// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email            String          @unique
  username         String          @unique
  password         String
  role             String?         @default("user")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  analytics        Analytics[]
  notifications    Notification[]
  posts           Post[]
  reports         Report[]
  socialAccounts  SocialAccount[]
}

model Analytics {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  platformId          String
  platform            Platform  @relation(fields: [platformId], references: [id])
  subscriberCount     Int       @default(0)
  viewCount          Int       @default(0)
  videoCount         Int       @default(0)
  likeCount          Int       @default(0)
  engagement         Float     @default(0)
  subscriberChange   String?
  subscriberChangeType String?
  timeSeriesData     Json[]   @default([])
  trafficSources     Json[]   @default([])
  recentActivity     Json[]   @default([])
  topContent         Json[]   @default([])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([userId])
  @@index([platformId])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  type      String
  message   String
  seen      Boolean   @default(false)
  createdAt DateTime  @default(now())

  @@index([userId])
}

model Platform {
  id            String          @id @default(cuid())
  name          String         @unique
  apiKey        String?
  apiSecret     String?
  createdAt     DateTime       @default(now())
  analytics     Analytics[]
  posts         Post[]
  socialAccounts SocialAccount[]
}

model Post {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  platformId      String
  platform        Platform  @relation(fields: [platformId], references: [id])
  content         String
  mediaUrl        String?
  status          String    @default("draft")
  scheduledAt     DateTime?
  postedAt        DateTime?
  engagementStats Json?
  aiFeedback      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([platformId])
}

model Report {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  title         String
  reportType    String
  generatedData Json
  createdAt     DateTime  @default(now())

  @@index([userId])
}

model SocialAccount {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  platformId    String
  platform      Platform  @relation(fields: [platformId], references: [id])
  accountHandle String
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([platformId])
}